import numpy
import matplotlib.pyplot as plt
import time
import sql_helpers as db

''' This code is not finished - this is just a skeleton/pseudocode for integrating with other parts of the program '''
''' The values generated by this code are sent back to the caller and stored there '''

# sample data
timeData = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
flowData = [30, 32, 33, 34, 34, 37, 41, 46, 43, 48, 49, 50, 50, 51, 56, 57, 56, 63, 78, 67]
tempData = [40, 50, 60, 50, 40, 60, 34, 65, 64, 34, 56, 46, 75, 54]

''' For each new graph frame generated, calculate the following data '''

''' Either pass in flowData as an argument or call from function - probably the latter '''

''' Print statements are just for testing, will be removed for  actual program integration '''

# flowData = flow data points from database since start of session
# numValues = number of values since the start of session - i.e. number of elements in array


# tempData = same, but only if we have time 

# Running average flow rate
def meanFlowRate(prevFlowMean, flowData, numValues): 
    numFrameValues = 100
    flowMean = numpy.mean(flowData) + prevFlowMean * numValues)/2
    print("The average flow rate for the session is", flowMean)
    return flowMean

''' For total water used, add current result to result from previous frame. '''
# Total water used throughout session - integral of flow rate over time
def totalWaterUsed(prevWaterUsed, flowData):
    waterUsed = numpy.trapz(flowData) + prevWaterUsed
    print("You used", waterUsed, "Liters of water")
    return waterUsed

# Maximum flow rate attained throughout session
def maxFlow(prevMaxFlow, flowData):
    curMaxFlow = numpy.amax(flowData)
    newMaxFlow = curMaxFlow if curMaxFlow > prevMaxFlow else prevMaxFlow
    return newMaxFlow

''' Keeping temperature functions in for now - keep if we have temperature sensor working later '''

# Average temperature
def meanTemp(prevTempMean, tempData, numValues):
    tempMean = (numpy.mean(tempData) + prevTempMean * numValues)/2
    print(tempMean)
    return tempMean

''' For range, retreive previous max and min values and compare with current values. 
    Store new max and min values from new values + previous max and min for next frame use '''
# Range of water temperatures
def rangeTemp(prevMaxTemp, prevMinTemp, tempData):
    maxComp = [prevMaxTemp, numpy.amax(tempData)]
    minComp = [prevMinTemp, numpy.amain(tempData)]
    tempRange = numpy.amax(maxComp) - numpy.amin(minComp)
    print(tempRange)

# Signifier that water is running
def state():
    # Need to initialize waterRunning?
    if final_data_point(s) == 0
        waterRunning = 1
    else
        waterRunning = 0
    return waterRunning

''' Data that spans beyond the current session '''
    ''' Only calculate when desired, or always calculate? Or perhaps at the end of each session '''

# Times that water (or IoT water system) is most commonly used
''' For this function, perhaps we could do approximate times or time ranges, and print the mode or the top few times '''
    ''' Get time data from database and find time range with most times water used '''
    ''' Could do something very simple, like using half-hour blocks of time 
            (A more complex approach would be to find a time range that balances range size and usage level, but that might not be ideal for this project)  '''

''' For functions that call upon data from other functions, maybe pass in the values from the caller once it has already received the values '''

# Total amount of water used over all time
def totalWater():
    netWaterUsed = waterUsed + #netWaterUsed from database
    ''' Store new total amount in table in database '''

# Average water flow over all time
def meanWater():
    meanWaterUsed = # weighted average of flowMean with meanWaterUsed from database

# Average water temperature over all time
''' do something similar to the other running averages, but multiply the pre-existing average by a much larger number of values '''
def meanTemp():
    netTempMean = # weighted average of tempMean with netTempMean from database

# Comparison of water usage metrics in some sort of visual display, i.e. plot average temperature for each time the system is used?
''' send values back to plotting program ? '''
''' do if we have time '''